// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id              String   @id @default(uuid())
  fullName        String   @map("full_name")
  identityNumber  String   @unique @map("identity_number")
  identityType    IdentityType @map("identity_type")
  email           String?  @unique
  password        String?
  phoneNumber     String?  @map("phone_number")
  isVerified      Boolean  @default(false)
  token           String?
  refreshToken    String?  @map("refresh_token")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userHasRoles    UserHasRole[]
  student         Student?
  lecturer        Lecturer?
  documents       Document[]
  canvasFiles     CanvasFile[]
  notifications   Notification[]
  thesisActivityLogs ThesisActivityLog[]
  thesisSeminarAudiences ThesisSeminarAudience[]
  thesisSeminarRubric ThesisSeminarRubric[]
  thesisDefenceRubrics ThesisDefenceRubric[]
  internshipApprovals InternshipApproval[]
  internshipSeminarBookingsRequester InternshipSeminarBooking[] @relation("InternshipSeminarBookingRequester")
  internshipSeminarBookingsApprover InternshipSeminarBooking[] @relation("InternshipSeminarBookingApprover")

  @@map("users")
}

model UserRole {
  id          String   @id @default(uuid())
  name        String
  userHasRoles UserHasRole[]
  // Back-relations for role_id references
  thesisParticipants     ThesisParticipant[]
  internshipSupervisors  InternshipSupervisor[]
  internshipAssessments  InternshipAssessment[]
  internshipApprovals    InternshipApproval[]

  @@map("user_roles")
}

model UserHasRole {
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  status    RoleStatus
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_has_roles")
}

// Student Management
model Student {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  studentStatusId   String?  @map("student_status_id")
  enrollmentYear    Int?     @map("enrollment_year")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentStatus     StudentStatus? @relation(fields: [studentStatusId], references: [id])
  skscompleted      Int
  thesis            Thesis[]
  thesisProposal    ThesisProposal[]
  researchMethodGrades ResearchMethodGrade[]
  internships       Internship[]
  yudisiumApplicants YudisiumApplicant[]
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  

  @@map("students")
}

model StudentStatus {
  id      String   @id @default(uuid())
  name    String
  students Student[]

  @@map("student_status")
}

// Lecturer Management
model Lecturer {
  id                    String   @id @default(uuid())
  userId                String   @unique @map("user_id")
  scienceGroupId        String?  @map("science_group_id")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scienceGroup          ScienceGroup? @relation(fields: [scienceGroupId], references: [id])
  thesisParticipants    ThesisParticipant[]
  thesisGuidances       ThesisGuidance[]
  thesisSeminarAudiences ThesisSeminarAudience[]
  thesisSeminarScores   ThesisSeminarScore[]
  thesisDefenceScores   ThesisDefenceScore[]
  internshipSupervisors InternshipSupervisor[]
  internshipGuidanceSchedules InternshipGuidanceSchedule[]
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("lecturers")
}

model ScienceGroup {
  id        String   @id @default(uuid())
  name      String
  lecturers Lecturer[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("science_groups")
}

// Academic Management
model AcademicYear {
  id        String   @id @default(uuid())
  semester  Semester @default(ganjil)
  year      Int?
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  thesis    Thesis[]
  thesisSeminarRubric ThesisSeminarRubric[]
  thesisDefenceRubrics ThesisDefenceRubric[]
  internships Internship[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("academic_years")
}

model Room {
  id                      String   @id @default(uuid())
  name                    String
  thesisSeminarSchedules  ThesisSeminarSchedule[]
  thesisDefenceSchedules  ThesisDefenceSchedule[]
  yudisiumSchedules       YudisiumSchedule[]
  internshipSeminarBookings InternshipSeminarBooking[]
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("rooms")
}

// Thesis Management
model Thesis {
  id                String   @id @default(uuid())
  studentId         String   @map("student_id")
  thesisTopicId     String?  @map("thesis_topic_id")
  thesisProposalId  String?  @map("thesis_proposal_id")
  thesisStatusId    String?  @map("thesis_status_id")
  academicYearId    String?  @map("academic_year_id")
  documentId        String?  @map("document_id")
  title             String?
  startDate         DateTime? @map("start_date")
  deadlineDate      DateTime? @map("deadline_date")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  student           Student  @relation(fields: [studentId], references: [id])
  thesisTopic       ThesisTopic? @relation(fields: [thesisTopicId], references: [id])
  thesisProposal    ThesisProposal? @relation(fields: [thesisProposalId], references: [id])
  thesisStatus      ThesisStatus? @relation(fields: [thesisStatusId], references: [id])
  academicYear      AcademicYear? @relation(fields: [academicYearId], references: [id])
  document          Document? @relation(fields: [documentId], references: [id])
  thesisParticipants ThesisParticipant[]
  thesisProgressCompletions ThesisProgressCompletion[]
  thesisGuidances   ThesisGuidance[]
  thesisActivityLogs ThesisActivityLog[]
  thesisSeminars    ThesisSeminar[]
  thesisDefences    ThesisDefence[]

  @@map("thesis")
}

model ThesisParticipant {
  id         String   @id @default(uuid())
  thesisId   String   @map("thesis_id")
  lecturerId String   @map("lecturer_id")
  roleId     String   @map("role_id")
  thesis     Thesis   @relation(fields: [thesisId], references: [id])
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id])
  role       UserRole @relation(fields: [roleId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("thesis_participants")
}

model ThesisTopic {
  id              String   @id @default(uuid())
  name            String
  thesis          Thesis[]
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("thesis_topics")
}

model ThesisStatus {
  id      String   @id @default(uuid())
  name    String
  thesis  Thesis[]

  @@map("thesis_status")
}

model ThesisProposal {
  id         String   @id @default(uuid())
  studentId  String   @map("student_id")
  documentId String?  @map("document_id")
  status     ProposalStatus @default(submitted)
  student    Student  @relation(fields: [studentId], references: [id])
  document   Document? @relation(fields: [documentId], references: [id])
  thesis     Thesis[]
  thesisProposalGrades ThesisProposalGrade[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("thesis_proposal")
}

model ThesisProgressComponent {
  id          String   @id @default(uuid())
  name        String
  description String?
  thesisProgressCompletions ThesisProgressCompletion[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("thesis_progress_components")
}

model ThesisProgressCompletion {
  id                        String   @id @default(uuid())
  thesisId                  String   @map("thesis_id")
  componentId               String   @map("component_id")
  completedAt               DateTime? @map("completed_at")
  validatedBySupervisor     Boolean  @default(false) @map("validated_by_supervisor")
  thesis                    Thesis   @relation(fields: [thesisId], references: [id])
  component                 ThesisProgressComponent @relation(fields: [componentId], references: [id])
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  @@map("thesis_progress_completions")
}

model ThesisGuidanceSchedule {
  id          String   @id @default(uuid())
  guidanceDate DateTime? @map("guidance_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  thesisGuidances ThesisGuidance[]

  @@map("thesis_guidance_schedules")
}

model ThesisGuidance {
  id                String   @id @default(uuid())
  thesisId          String   @map("thesis_id")
  scheduleId        String?  @map("schedule_id")
  supervisorId      String?  @map("supervisor_id")
  studentNotes      String?  @map("student_notes")
  supervisorFeedback String? @map("supervisor_feedback")
  meetingUrl        String?  @map("meeting_url")
  status            GuidanceStatus @default(scheduled)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  thesis            Thesis   @relation(fields: [thesisId], references: [id])
  schedule          ThesisGuidanceSchedule? @relation(fields: [scheduleId], references: [id])
  supervisor        Lecturer? @relation(fields: [supervisorId], references: [id])

  @@map("thesis_guidances")
}

model ThesisActivityLog {
  id        String   @id @default(uuid())
  thesisId  String   @map("thesis_id")
  userId    String   @map("user_id")
  activity  String
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  thesis    Thesis   @relation(fields: [thesisId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("thesis_activity_logs")
}

// Thesis Seminar Management
model ThesisSeminar {
  id        String   @id @default(uuid())
  thesisId  String   @map("thesis_id")
  scheduleId String?  @map("schedule_id")
  resultId  String?  @map("result_id")
  status    SeminarStatus @default(scheduled)
  thesis    Thesis   @relation(fields: [thesisId], references: [id])
  schedule  ThesisSeminarSchedule? @relation(fields: [scheduleId], references: [id])
  result    ThesisSeminarResult? @relation(fields: [resultId], references: [id])
  audiences ThesisSeminarAudience[]
  scores    ThesisSeminarScore[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("thesis_seminars")
}

model ThesisSeminarSchedule {
  id        String   @id @default(uuid())
  roomId    String?  @map("room_id")
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  status    ScheduleStatus @default(planned)
  room      Room?    @relation(fields: [roomId], references: [id])
  seminars  ThesisSeminar[]
  internshipSeminars InternshipSeminar[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("thesis_seminar_schedules")
}

model ThesisSeminarResult {
  id       String   @id @default(uuid())
  name     String
  seminars ThesisSeminar[]
  internshipSeminars InternshipSeminar[]

  @@map("thesis_seminar_result")
}

model ThesisSeminarAudience {
  id          String   @id @default(uuid())
  seminarId   String   @map("seminar_id")
  userId      String   @map("user_id")
  validatedBy String?  @map("validated_by")
  validatedAt DateTime? @map("validated_at")
  seminar     ThesisSeminar @relation(fields: [seminarId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  validator   Lecturer? @relation(fields: [validatedBy], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("thesis_seminar_audiences")
}

model ThesisSeminarRubric {
  id              String   @id @default(uuid())
  academicYearId  String?  @map("academic_year_id")
  title           String?
  createdBy       String?  @map("created_by")
  academicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  creator         User?    @relation(fields: [createdBy], references: [id])
  details         ThesisSeminarRubricDetail[]
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("thesis_seminar_rubric")
}

model ThesisSeminarRubricDetail {
  id        String   @id @default(uuid())
  rubricId  String   @map("rubric_id")
  indicator String?
  weight    Float?
  rubric    ThesisSeminarRubric @relation(fields: [rubricId], references: [id])
  scores    ThesisSeminarScore[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("thesis_seminar_rubric_details")
}

model ThesisSeminarScore {
  id              String   @id @default(uuid())
  seminarId       String   @map("seminar_id")
  rubricDetailId  String   @map("rubric_detail_id")
  scoredBy        String   @map("scored_by")
  score           Int?
  comment         String?
  seminar         ThesisSeminar @relation(fields: [seminarId], references: [id])
  rubricDetail    ThesisSeminarRubricDetail @relation(fields: [rubricDetailId], references: [id])
  scorer          Lecturer @relation(fields: [scoredBy], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("thesis_seminar_scores")
}

// Thesis Defence Management
model ThesisDefence {
  id                      String   @id @default(uuid())
  thesisId                String?  @map("thesis_id")
  thesisDefenceScheduleId String?  @map("thesis_defence_schedule_id")
  thesisDefenceStatusId   String?  @map("thesis_defence_status_id")
  thesis                  Thesis?  @relation(fields: [thesisId], references: [id])
  schedule                ThesisDefenceSchedule? @relation(fields: [thesisDefenceScheduleId], references: [id])
  status                  ThesisDefenceStatus? @relation(fields: [thesisDefenceStatusId], references: [id])
  scores                  ThesisDefenceScore[]
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("thesis_defences")
}

model ThesisDefenceSchedule {
  id                  String   @id @default(uuid())
  roomId              String?  @map("room_id")
  startTime           DateTime? @map("start_time")
  endTime             DateTime? @map("end_time")
  status              DefenceScheduleStatus @default(planned)
  supervisorApproval  Boolean? @map("supervisor_approval")
  room                Room?    @relation(fields: [roomId], references: [id])
  defences            ThesisDefence[]
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("thesis_defence_schedules")
}

model ThesisDefenceStatus {
  id       String   @id @default(uuid())
  name     String?
  defences ThesisDefence[]

  @@map("thesis_defence_status")
}

model ThesisDefenceRubric {
  id              String   @id @default(uuid())
  academicYearId  String?  @map("academic_year_id")
  title           String?
  createdBy       String?  @map("created_by")
  academicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  creator         User?    @relation(fields: [createdBy], references: [id])
  details         ThesisDefenceRubricDetail[]
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("thesis_defence_rubrics")
}

model ThesisDefenceRubricDetail {
  id        String   @id @default(uuid())
  rubricId  String   @map("rubric_id")
  indicator String?
  weight    Float?
  rubric    ThesisDefenceRubric @relation(fields: [rubricId], references: [id])
  scores    ThesisDefenceScore[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("thesis_defence_rubric_details")
}

model ThesisDefenceScore {
  id              String   @id @default(uuid())
  thesisDefenceId String   @map("thesis_defence_id")
  rubricDetailId  String   @map("rubric_detail_id")
  scoredBy        String   @map("scored_by")
  score           Int?
  reviewerNote    String?  @map("reviewer_note")
  defence         ThesisDefence @relation(fields: [thesisDefenceId], references: [id])
  rubricDetail    ThesisDefenceRubricDetail @relation(fields: [rubricDetailId], references: [id])
  scorer          Lecturer @relation(fields: [scoredBy], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("thesis_defence_scores")
}

// Yudisium Management
model Yudisium {
  id                String   @id @default(uuid())
  yudisiumScheduleId String?  @map("yudisium_schedule_id")
  yudisiumDecree    String?  @map("yudisium_decree")
  schedule          YudisiumSchedule? @relation(fields: [yudisiumScheduleId], references: [id])
  participants      YudisiumParticipant[]
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("yudisiums")
}

model YudisiumSchedule {
  id                      String   @id @default(uuid())
  roomId                  String?  @map("room_id")
  schedule                DateTime?
  status                  YudisiumStatus @default(planned)
  departmentHeadApproval  Boolean? @map("department_head_approval")
  room                    Room?    @relation(fields: [roomId], references: [id])
  yudisiums               Yudisium[]
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("yudisium_schedules")
}

model YudisiumApplicant {
  id                        String   @id @default(uuid())
  studentId                 String   @map("student_id")
  yudisiumApplicantStatusId String?  @map("yudisium_applicant_status_id")
  isEligible                Boolean? @map("is_eligible")
  student                   Student  @relation(fields: [studentId], references: [id])
  status                    YudisiumApplicantStatus? @relation(fields: [yudisiumApplicantStatusId], references: [id])
  participants              YudisiumParticipant[]
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  @@map("yudisium_applicants")
}

model YudisiumApplicantStatus {
  id        String   @id @default(uuid())
  name      String?
  applicants YudisiumApplicant[]

  @@map("yudisium_applicant_status")
}

model YudisiumParticipant {
  id                  String   @id @default(uuid())
  yudisiumId          String   @map("yudisium_id")
  yudisiumApplicantId String   @map("yudisium_applicant_id")
  yudisium            Yudisium @relation(fields: [yudisiumId], references: [id])
  applicant           YudisiumApplicant @relation(fields: [yudisiumApplicantId], references: [id])
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("yudisium_participants")
}

// Document Management
model Document {
  id              String   @id @default(uuid())
  userId          String?  @map("user_id")
  documentTypeId  String?  @map("document_type_id")
  filePath        String?  @map("file_path")
  fileName        String?  @map("file_name")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User?    @relation(fields: [userId], references: [id])
  documentType    DocumentType? @relation(fields: [documentTypeId], references: [id])
  canvasFiles     CanvasFile[]
  thesis          Thesis[]
  thesisProposal  ThesisProposal[]
  internships     Internship[] @relation("InternshipReportDocument")
  internshipProposals Internship[] @relation("InternshipProposalDocument")
  internshipCertificates Internship[] @relation("InternshipCertificateDocument")
  internshipAssessments InternshipAssessment[]

  @@map("documents")
}

model DocumentType {
  id        String   @id @default(uuid())
  name      String?
  documents Document[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("document_types")
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String?
  filePath  String?  @map("file_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("document_templates")
}

model CanvasFile {
  id          String   @id @default(uuid())
  documentId  String?  @map("document_id")
  userId      String?  @map("user_id")
  annotations Json?
  version     Int?
  document    Document? @relation(fields: [documentId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("canvas_files")
}

// Notification Management
model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String?
  message   String?
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Grade Management
model ThesisProposalGrade {
  id        String   @id @default(uuid())
  proposalId String?  @map("proposal_id")
  grade     Int?
  proposal  ThesisProposal? @relation(fields: [proposalId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("thesis_proposal_grades")
}

model ResearchMethodGrade {
  id        String   @id @default(uuid())
  studentId String?  @map("student_id")
  grade     Int?
  student   Student? @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("research_method_grades")
}

// Internship Management
model Internship {
  id                      String   @id @default(uuid())
  studentId               String   @map("student_id")
  companyName             String   @map("company_name")
  companyAddress          String?  @map("company_address")
  fieldSupervisor         String?  @map("field_supervisor")
  fieldSupervisorPhone    String?  @map("field_supervisor_phone")
  startDate               DateTime @map("start_date")
  endDate                 DateTime @map("end_date")
  status                  InternshipStatus @default(ongoing)
  reportDocumentId        String?  @map("report_document_id")
  proposalDocumentId      String?  @map("proposal_document_id")
  certificateDocumentId   String?  @map("certificate_document_id")
  academicYearId          String?  @map("academic_year_id")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @updatedAt @map("updated_at")
  student                 Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reportDocument          Document? @relation("InternshipReportDocument", fields: [reportDocumentId], references: [id])
  proposalDocument        Document? @relation("InternshipProposalDocument", fields: [proposalDocumentId], references: [id])
  certificateDocument     Document? @relation("InternshipCertificateDocument", fields: [certificateDocumentId], references: [id])
  academicYear            AcademicYear? @relation(fields: [academicYearId], references: [id])
  supervisors             InternshipSupervisor[]
  reports                 InternshipReport[]
  assessments             InternshipAssessment[]
  seminars                InternshipSeminar[]
  approvals               InternshipApproval[]
  guidanceSchedules       InternshipGuidanceSchedule[]
  seminarBookings         InternshipSeminarBooking[]

  @@index([studentId], map: "idx_internships_student")
  @@map("internships")
}

model InternshipSupervisor {
  id                      String   @id @default(uuid())
  internshipId            String   @map("internship_id")
  lecturerId              String?  @map("lecturer_id")
  externalSupervisorName  String?  @map("external_supervisor_name")
  roleId                  String   @map("role_id")
  internship              Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  lecturer                Lecturer? @relation(fields: [lecturerId], references: [id])
  role                    UserRole  @relation(fields: [roleId], references: [id])
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("internship_supervisors")
}

model InternshipReport {
  id                      String   @id @default(uuid())
  internshipId            String   @map("internship_id")
  entryDate               DateTime @map("entry_date")
  activityDescription     String?  @map("activity_description")
  validatedBySupervisor   Boolean  @default(false) @map("validated_by_supervisor")
  createdAt               DateTime @default(now()) @map("created_at")
  internship              Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)

  @@index([internshipId], map: "idx_internship_reports_internship")
  @@map("internship_reports")
}

model InternshipAssessment {
  id                      String   @id @default(uuid())
  internshipId            String   @map("internship_id")
  assessorRoleId          String?  @map("assessor_role_id")
  assessorId              String?  @map("assessor_id")
  score                   Float?
  comments                String?
  rawImageDocumentId      String?  @map("raw_image_document_id")
  ocrText                 String?  @map("ocr_text")
  createdAt               DateTime @default(now()) @map("created_at")
  internship              Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  rawImageDocument        Document? @relation(fields: [rawImageDocumentId], references: [id])
  assessorRole            UserRole? @relation(fields: [assessorRoleId], references: [id])

  @@index([internshipId], map: "idx_internship_assessments_internship")
  @@map("internship_assessments")
}

model InternshipSeminar {
  id          String   @id @default(uuid())
  internshipId String  @map("internship_id")
  scheduleId  String?  @map("schedule_id")
  resultId    String?  @map("result_id")
  status      SeminarStatus @default(scheduled)
  internship  Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  schedule    ThesisSeminarSchedule? @relation(fields: [scheduleId], references: [id])
  result      ThesisSeminarResult? @relation(fields: [resultId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("internship_seminars")
}

model InternshipApproval {
  id          String   @id @default(uuid())
  internshipId String  @map("internship_id")
  approvedBy  String?  @map("approved_by")
  roleId      String?  @map("role_id")
  status      ApprovalStatus @default(pending)
  notes       String?
  approvedAt  DateTime? @map("approved_at")
  internship  Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  approver    User?    @relation(fields: [approvedBy], references: [id])
  role        UserRole? @relation(fields: [roleId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("internship_approvals")
}

model InternshipGuidanceSchedule {
  id              String   @id @default(uuid())
  internshipId    String   @map("internship_id")
  lecturerId      String   @map("lecturer_id")
  meetingDate     DateTime @map("meeting_date")
  status          GuidanceScheduleStatus @default(requested)
  studentNotes    String?  @map("student_notes")
  lecturerFeedback String? @map("lecturer_feedback")
  createdAt       DateTime @default(now()) @map("created_at")
  internship      Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  lecturer        Lecturer @relation(fields: [lecturerId], references: [id])

  @@map("internship_guidance_schedules")
}

model InternshipSeminarBooking {
  id          String   @id @default(uuid())
  internshipId String  @map("internship_id")
  roomId      String   @map("room_id")
  requestedBy String   @map("requested_by")
  approvedBy  String?  @map("approved_by")
  status      BookingStatus @default(requested)
  requestedAt DateTime @default(now()) @map("requested_at")
  approvedAt  DateTime? @map("approved_at")
  internship  Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  room        Room     @relation(fields: [roomId], references: [id])
  requester   User     @relation("InternshipSeminarBookingRequester", fields: [requestedBy], references: [id])
  approver    User?    @relation("InternshipSeminarBookingApprover", fields: [approvedBy], references: [id])

  @@index([roomId], map: "idx_internship_seminar_bookings_room")
  @@map("internship_seminar_bookings")
}

// Enums
enum IdentityType {
  NIM
  NIP
  OTHER
}

enum RoleStatus {
  active
  nonActive
}

enum Semester {
  ganjil
  genap
}


enum ProposalStatus {
  submitted
  accepted
  rejected
}

enum GuidanceStatus {
  scheduled
  completed
  cancelled
}

enum SeminarStatus {
  scheduled
  rescheduled
  ongoing
  completed
  cancelled
}

enum ScheduleStatus {
  planned
  rescheduled
  finalized
}

enum DefenceScheduleStatus {
  planned
  scheduled
  finalized
  cancelled
}

enum YudisiumStatus {
  planned
  finalized
  completed
}

enum InternshipStatus {
  ongoing
  completed
  cancelled
}

// Removed enums SupervisorRole, AssessorType, ApprovalRole in favor of user_roles relation via role_id

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum GuidanceScheduleStatus {
  requested
  approved
  completed
  cancelled
}

enum BookingStatus {
  requested
  approved
  cancelled
  completed
}

