openapi: 3.0.3
info:
  title: Backend API
  version: 0.1.0
  description: |
    OpenAPI specification for the Backend API (Express + Prisma + Redis).

  Notes:
  - Spec is modularized by feature area (auth, admin, thesis guidance) using external $refs.
  - Error responses follow a unified JSON format from error.middleware.js.
  contact:
    name: API Support
servers:
  - url: http://localhost:3000
    description: Local development

tags:
  - name: System
    description: System/health endpoints
  - name: Auth
    description: Authentication endpoints (JWT access + refresh)
  - name: AdminFeatures
    description: Admin-only utilities and maintenance endpoints
  - name: LecturerThesisGuidance
    description: Lecturer-side thesis guidance endpoints
  - name: StudentThesisGuidance
    description: Student-side thesis guidance endpoints

paths:
  "/":
    get:
      tags: [System]
      summary: API health check
      operationId: getHealth
      responses:
        "200":
          description: Health OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "API is running ðŸš€"
        "500":
          $ref: "#/components/responses/InternalError"

  

  "/auth/login":
    $ref: "./auth/swagger-auth.yaml#/auth_login"

  "/auth/refresh":
    $ref: "./auth/swagger-auth.yaml#/auth_refresh"

  "/auth/me":
    $ref: "./auth/swagger-auth.yaml#/auth_me"

  "/auth/logout":
    $ref: "./auth/swagger-auth.yaml#/auth_logout"

  "/auth/password":
    $ref: "./auth/swagger-auth.yaml#/auth_password"

  "/auth/reset/request":
    $ref: "./auth/swagger-auth.yaml#/auth_reset_request"

  "/auth/reset/verify":
    $ref: "./auth/swagger-auth.yaml#/auth_reset_verify"

  "/auth/reset/confirm":
    $ref: "./auth/swagger-auth.yaml#/auth_reset_confirm"

  "/adminfeatures/students/import":
    $ref: "./admin/swagger-admin.yaml#/admin_import_students"

  "/adminfeatures/users":
    $ref: "./admin/swagger-admin.yaml#/admin_create_user"

  "/adminfeatures/{id}":
    $ref: "./admin/swagger-admin.yaml#/admin_update_user"

  "/adminfeatures/academic-years":
    $ref: "./admin/swagger-admin.yaml#/admin_create_academic_year"
  "/adminfeatures/academic-years/{id}":
    $ref: "./admin/swagger-admin.yaml#/admin_update_academic_year"

  "/auth/verify/request":
    $ref: "./auth/swagger-auth.yaml#/auth_verify_request"

  "/thesisGuidance/lecturer/my-students":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_my_students"

  "/thesisGuidance/lecturer/requests":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_requests"

  "/thesisGuidance/lecturer/requests/{guidanceId}/reject":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_requests_reject"

  "/thesisGuidance/lecturer/requests/{guidanceId}/approve":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_requests_approve"

  "/thesisGuidance/lecturer/progress":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_progress"

  "/thesisGuidance/lecturer/progress/{studentId}":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_progress_detail"

  "/thesisGuidance/lecturer/progress/{studentId}/approve":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_progress_approve_components"

  "/thesisGuidance/lecturer/feedback/{guidanceId}":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_feedback"

  "/thesisGuidance/lecturer/progress/{studentId}/final-approval":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_final_approval"

  "/thesisGuidance/lecturer/progress/{studentId}/fail":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_fail_thesis"

  "/thesisGuidance/lecturer/guidance-history/{studentId}":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_guidance_history"

  "/thesisGuidance/lecturer/activity-log/{studentId}":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_activity_log"

  "/thesisGuidance/lecturer/supervisor/eligibility":
    $ref: "./thesisGuidance/lecturer.yaml#/lecturer_supervisor_eligibility"

  "/thesisGuidance/student/guidance":
    $ref: "./thesisGuidance/student.yaml#/student_guidance_list"

  "/thesisGuidance/student/guidance/{guidanceId}":
    $ref: "./thesisGuidance/student.yaml#/student_guidance_detail"

  "/thesisGuidance/student/guidance/request":
    $ref: "./thesisGuidance/student.yaml#/student_guidance_request"

  "/thesisGuidance/student/guidance/{guidanceId}/reschedule":
    $ref: "./thesisGuidance/student.yaml#/student_guidance_reschedule"

  "/thesisGuidance/student/guidance/{guidanceId}/cancel":
    $ref: "./thesisGuidance/student.yaml#/student_guidance_cancel"

  "/thesisGuidance/student/guidance/{guidanceId}/notes":
    $ref: "./thesisGuidance/student.yaml#/student_guidance_notes"

  "/thesisGuidance/student/progress":
    $ref: "./thesisGuidance/student.yaml#/student_progress_detail"

  "/thesisGuidance/student/progress/complete":
    $ref: "./thesisGuidance/student.yaml#/student_progress_complete"

  "/thesisGuidance/student/history":
    $ref: "./thesisGuidance/student.yaml#/student_history"

  "/thesisGuidance/student/activity-log":
    $ref: "./thesisGuidance/student.yaml#/student_activity_log"

  "/thesisGuidance/student/supervisors":
    $ref: "./thesisGuidance/student.yaml#/student_supervisors"

components:
  schemas:
    FailThesisBody:
      type: object
      properties:
        reason:
          type: string
    FeedbackBody:
      type: object
      required: [feedback]
      properties:
        feedback:
          type: string
    ApproveGuidanceBody:
      type: object
      properties:
        feedback:
          type: string
        meetingUrl:
          type: string
          format: uri
    ApproveComponentsBody:
      type: object
      required: [componentIds]
      properties:
        componentIds:
          type: array
          items: { type: string }
    MyStudentItem:
      type: object
      properties:
        thesisId: { type: string }
        thesisTitle: { type: string, nullable: true }
        studentId: { type: string }
        studentUser:
          type: object
          properties:
            id: { type: string }
            fullName: { type: string }
            email: { type: string, nullable: true }
            identityNumber: { type: string }
        role: { type: string }
    GuidanceItem:
      type: object
      properties:
        id: { type: string }
        thesisId: { type: string }
        supervisorId: { type: string, nullable: true }
        status: { type: string }
        meetingUrl: { type: string, nullable: true }
        supervisorFeedback: { type: string, nullable: true }
        schedule:
          $ref: "#/components/schemas/GuidanceScheduleItem"
        student:
          type: object
          nullable: true
          additionalProperties: true
    GuidanceScheduleItem:
      type: object
      properties:
        id: { type: string }
        guidanceDate: { type: string, format: date-time, nullable: true }
    ProgressSummaryItem:
      type: object
      properties:
        thesisId: { type: string }
        validated: { type: integer }
        total: { type: integer }
    ProgressDetailItem:
      type: object
      properties:
        componentId: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        completedAt: { type: string, format: date-time, nullable: true }
        validatedBySupervisor: { type: boolean }
    ActivityLogItem:
      type: object
      properties:
        id: { type: string }
        thesisId: { type: string }
        userId: { type: string }
        activity: { type: string }
        notes: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
    SupervisorItem:
      type: object
      properties:
        lecturerId: { type: string }
        role: { type: string, nullable: true }
        user:
          type: object
          nullable: true
          additionalProperties: true
    StudentRequestGuidanceBody:
      type: object
      required: [guidanceDate]
      properties:
        guidanceDate: { type: string, format: date-time }
        studentNotes: { type: string }
    StudentRescheduleGuidanceBody:
      type: object
      required: [guidanceDate]
      properties:
        guidanceDate: { type: string, format: date-time }
        studentNotes: { type: string }
    StudentNotesBody:
      type: object
      required: [studentNotes]
      properties:
        studentNotes: { type: string }
    StudentCompleteComponentsBody:
      type: object
      required: [componentIds]
      properties:
        componentIds:
          type: array
          items: { type: string }
        completedAt: { type: string, format: date-time }
    UpdateUserRequest:
      type: object
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          description: Adds roles (non-admin only); existing roles are kept. Items can be string or object with status.
          items:
            oneOf:
              - type: string
              - type: object
                properties:
                  name:
                    type: string
                  status:
                    type: string
                    enum: [active, nonActive]
        identityNumber:
          type: string
        identityType:
          type: string
          enum: [NIM, NIP, OTHER]
        isVerified:
          type: boolean
    CreateAcademicYearRequest:
      type: object
      properties:
        semester:
          type: string
          enum: [ganjil, genap]
        year:
          type: integer
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    UpdateAcademicYearRequest:
      type: object
      properties:
        semester:
          type: string
          enum: [ganjil, genap]
        year:
          type: integer
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    CreateUserRequest:
      type: object
      required: [email]
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            type: string
          description: Roles to assign to the new user ("admin" will be ignored)
        identityNumber:
          type: string
        identityType:
          type: string
          enum: [NIM, NIP, OTHER]
    CreateUserResponse:
      type: object
      properties:
        message:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
              format: email
            roles:
              type: array
              items:
                type: string
  
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    AuthUser:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          description: Roles owned by the user
          items:
            $ref: "#/components/schemas/RoleItem"
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: "#/components/schemas/AuthUser"
        accessToken:
          type: string
        refreshToken:
          type: string
    RoleItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [active, nonActive]
    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
    RefreshResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        accessToken:
          type: string
        refreshToken:
          type: string
    ChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    NotificationSample:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        message:
          type: string
    ImportStudentsSummary:
      type: object
      properties:
        created:
          type: integer
          example: 10
        updated:
          type: integer
          example: 0
        skipped:
          type: integer
          example: 5
        failed:
          type: integer
          example: 1
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        status:
          type: integer
          example: 500
        message:
          type: string
          example: Internal Server Error
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: /user
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
