openapi: 3.0.3
info:
  title: Backend API
  version: 0.1.0
  description: |
    OpenAPI specification for the Backend API (Express + Prisma + Redis).

    Notes:
    - The current implementation includes minimal sample routes for /user and /notification.
    - Error responses follow a unified JSON format from error.middleware.js.
  contact:
    name: API Support
servers:
  - url: http://localhost:3000
    description: Local development

tags:
  - name: System
    description: System/health endpoints
  - name: User
    description: User sample endpoints
  - name: Notification
    description: Notification sample endpoints
  - name: Auth
    description: Authentication endpoints (JWT access + refresh)
  - name: AdminFeatures
    description: Admin-only utilities and maintenance endpoints

paths:
  "/":
    get:
      tags: [System]
      summary: API health check
      operationId: getHealth
      responses:
        "200":
          description: Health OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "API is running ðŸš€"
        "500":
          $ref: "#/components/responses/InternalError"

  "/user":
    get:
      tags: [User]
      summary: Get sample users
      operationId: getUsers
      responses:
        "200":
          description: Sample list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  route:
                    type: string
                  message:
                    type: string
                  sample:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserSample"
              example:
                route: "/user"
                message: "User route is alive"
                sample:
                  - id: 1
                    name: Alice
                    email: alice@example.com
                  - id: 2
                    name: Bob
                    email: bob@example.com
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      tags: [User]
      summary: Admin - Create user and assign roles
      description: |
        Create a new user account and assign roles. This endpoint is restricted to administrators.
        Notes:
        - The 'admin' role cannot be assigned via this endpoint and will be ignored if provided.
        - The system generates a temporary password and emails it to the user along with a verification link.
      operationId: adminCreateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            example:
              fullName: "Budi Santoso"
              email: "budi@example.com"
              roles: ["student", "pembimbing 1"]
              identityNumber: "2211529999"
              identityType: "NIM"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
              example:
                message: "User created"
                user:
                  id: "uuid"
                  email: "budi@example.com"
                  roles: ["student", "pembimbing 1"]
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalError"

  "/user/{id}":
    get:
      tags: [User]
      summary: Get sample user by id (echo)
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User id
      responses:
        "200":
          description: Echoes the id received
          content:
            application/json:
              schema:
                type: object
                properties:
                  route:
                    type: string
                  id:
                    type: string
              example:
                route: "/user/:id"
                id: "1"
        "500":
          $ref: "#/components/responses/InternalError"

  "/notification":
    get:
      tags: [Notification]
      summary: Get sample notifications
      operationId: getNotifications
      responses:
        "200":
          description: Sample list of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  route:
                    type: string
                  message:
                    type: string
                  examples:
                    type: array
                    items:
                      $ref: "#/components/schemas/NotificationSample"
              example:
                route: "/notification"
                message: "Notification route is alive"
                examples:
                  - id: 1
                    title: Welcome
                    message: Hello there!
                  - id: 2
                    title: Reminder
                    message: Don't forget to check in.
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      tags: [Notification]
      summary: Create a sample notification (echo)
      operationId: createNotification
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
            example:
              title: Hello
              message: World
      responses:
        "201":
          description: Echoes the received payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  route:
                    type: string
                  action:
                    type: string
                  received:
                    type: object
                    additionalProperties: true
              example:
                route: "/notification"
                action: "create"
                received:
                  title: Hello
                  message: World
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/login":
    post:
      tags: [Auth]
      summary: Login with email and password
      operationId: authLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              email: user@example.com
              password: password123
      responses:
        "200":
          description: Login success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/refresh":
    post:
      tags: [Auth]
      summary: Refresh access token
      operationId: authRefresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
            example:
              refreshToken: <refresh-token>
      responses:
        "200":
          description: New tokens issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/me":
    get:
      tags: [Auth]
      summary: Get current user info (from access token)
      operationId: authMe
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    description: JWT payload
                    additionalProperties: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/logout":
    post:
      tags: [Auth]
      summary: Logout (revoke refresh token)
      operationId: authLogout
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/password":
    patch:
      tags: [Auth]
      summary: Change password
      operationId: authChangePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
            example:
              currentPassword: oldpass123
              newPassword: newpass456
      responses:
        "200":
          description: Password changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/reset/request":
    post:
      tags: [Auth]
      summary: Request password reset (send email)
      operationId: authResetRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
            example:
              email: user@example.com
      responses:
        "200":
          description: Email sent (or ignored to avoid enumeration)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/reset/verify":
    get:
      tags: [Auth]
      summary: Verify password reset token
      operationId: authResetVerify
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  tokenValid:
                    type: boolean
                    example: true
                  sub:
                    type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/reset/confirm":
    post:
      tags: [Auth]
      summary: Reset password with token
      operationId: authResetConfirm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, newPassword]
              properties:
                token:
                  type: string
                newPassword:
                  type: string
            example:
              token: <token>
              newPassword: newpass123
      responses:
        "200":
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  "/adminfeatures/students/import":
    post:
      tags: [AdminFeatures]
      summary: Admin - Import students from CSV
      description: |
        Upload a CSV to import student accounts.
        - Required headers: nim, nama, email
        - Optional header: sks_completed
        - Rows with existing email are skipped (no updates)
        - New users are created with password=null and isVerified=false
        - Assigns role "student" and creates Student with enrollmentYear derived from NIM
        - Supports separator "," or ";" automatically
      operationId: adminImportStudentsCsv
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
      responses:
        "200":
          description: Import summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  summary:
                    $ref: "#/components/schemas/ImportStudentsSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalError"

  "/adminfeatures/{id}":
    patch:
      tags: [AdminFeatures]
      summary: Admin - Update user and add roles
      description: |
        Update a user's data and add (non-admin) roles without removing existing ones.
        Notes:
        - The 'admin' role will not be granted or removed by this endpoint.
        - If the resulting roles include 'student' or identityType is NIM, a Student record is ensured.
        - If lecturer-related roles are used or identityType is NIP, a Lecturer record is ensured.
      operationId: adminUpdateUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User id (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
            example:
              fullName: "Budi Santoso"
              email: "budi@example.com"
              roles:
                - name: "student"
                  status: "active"
                - name: "pembimbing 1"
                  status: "nonActive"
              identityNumber: "2211529999"
              identityType: "NIM"
              isVerified: true
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    description: Updated user with roles/student/lecturer relations
                    additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalError"

  "/adminfeatures/academic-years":
    post:
      tags: [AdminFeatures]
      summary: Admin - Create academic year
      operationId: adminCreateAcademicYear
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAcademicYearRequest"
            example:
              semester: ganjil
              year: 2025
              startDate: "2025-08-01T00:00:00.000Z"
              endDate: "2026-01-31T00:00:00.000Z"
      responses:
        "201":
          description: Academic year created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  academicYear:
                    type: object
                    additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalError"
  "/adminfeatures/academic-years/{id}":
    patch:
      tags: [AdminFeatures]
      summary: Admin - Update academic year
      operationId: adminUpdateAcademicYear
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Academic year id (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAcademicYearRequest"
            example:
              semester: genap
              year: 2026
              startDate: "2026-02-01T00:00:00.000Z"
              endDate: "2026-07-31T00:00:00.000Z"
      responses:
        "200":
          description: Academic year updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  academicYear:
                    type: object
                    additionalProperties: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Academic year not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalError"

  "/auth/verify/request":
    post:
      tags: [Auth]
      summary: Request account activation email
      description: |
        User-initiated account activation. If the email exists and is not verified, the server sends an activation link to the email.
        If the account does not yet have a password, a temporary password will be generated and included in the email.
        The response is always success to avoid email enumeration.
      operationId: requestAccountActivation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
            example:
              email: user@example.com
      responses:
        "200":
          description: Request accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

components:
  schemas:
    UpdateUserRequest:
      type: object
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          description: Adds roles (non-admin only); existing roles are kept. Items can be string or object with status.
          items:
            oneOf:
              - type: string
              - type: object
                properties:
                  name:
                    type: string
                  status:
                    type: string
                    enum: [active, nonActive]
        identityNumber:
          type: string
        identityType:
          type: string
          enum: [NIM, NIP, OTHER]
        isVerified:
          type: boolean
    CreateAcademicYearRequest:
      type: object
      properties:
        semester:
          type: string
          enum: [ganjil, genap]
        year:
          type: integer
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    UpdateAcademicYearRequest:
      type: object
      properties:
        semester:
          type: string
          enum: [ganjil, genap]
        year:
          type: integer
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    CreateUserRequest:
      type: object
      required: [email]
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            type: string
          description: Roles to assign to the new user ("admin" will be ignored)
        identityNumber:
          type: string
        identityType:
          type: string
          enum: [NIM, NIP, OTHER]
    CreateUserResponse:
      type: object
      properties:
        message:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
              format: email
            roles:
              type: array
              items:
                type: string
  
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    AuthUser:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        email:
          type: string
          format: email
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: "#/components/schemas/AuthUser"
        accessToken:
          type: string
        refreshToken:
          type: string
    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
    RefreshResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        accessToken:
          type: string
        refreshToken:
          type: string
    ChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    UserSample:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
    NotificationSample:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        message:
          type: string
    ImportStudentsSummary:
      type: object
      properties:
        created:
          type: integer
          example: 10
        updated:
          type: integer
          example: 0
        skipped:
          type: integer
          example: 5
        failed:
          type: integer
          example: 1
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        status:
          type: integer
          example: 500
        message:
          type: string
          example: Internal Server Error
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: /user
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
